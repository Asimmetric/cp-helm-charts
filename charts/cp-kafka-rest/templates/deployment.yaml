{{- if .Capabilities.APIVersions.Has "apps/v1" }}
apiVersion: apps/v1
{{- else }}
apiVersion: apps/v1beta2
{{- end }}
kind: Deployment
metadata:
  name: {{ template "cp-kafka-rest.fullname" . }}
  labels:
    app: {{ template "cp-kafka-rest.name" . }}
    chart: {{ template "cp-kafka-rest.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "cp-kafka-rest.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "cp-kafka-rest.name" . }}
        release: {{ .Release.Name }}
      {{- if or .Values.podAnnotations .Values.jmx.prometheus.enabled .Values.jmx.datadog.enabled }}
      annotations:
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      {{- if .Values.jmx.prometheus.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.jmx.prometheus.port | quote }}
      {{- end }}
      { { - if .Values.jmx.datadog.enabled } }
      ad.datadoghq.com/{{ template "cp-kafka-rest.fullname" . }}.check_names: '["confluent_platform"]'
      ad.datadoghq.com/{{ template "cp-kafka-rest.fullname" . }}.init_configs: '[{"is_jmx":true,"collect_default_metrics":true}]'
      ad.datadoghq.com/{{ template "cp-kafka-rest.fullname" . }}.instances: |
        [
          {
            "host":"%%host%%",
            "port":{{ .Values.jmx.port | quote }},
            "max_returned_metrics":999
          }
        ]
      ad.datadoghq.com/{{ template "cp-kafka-rest.fullname" . }}.logs: '[{"source":"confluent_platform","service":"confluent_platform"}]'
      { { - end } }
      {{- end }}
    spec:
      containers:
        {{- if .Values.jmx.prometheus.enabled }}
        - name: prometheus-jmx-exporter
          image: "{{ .Values.jmx.prometheus.image }}:{{ .Values.jmx.prometheus.imageTag }}"
          imagePullPolicy: "{{ .Values.jmx.prometheus.imagePullPolicy }}"
          command:
          - java
          - -XX:+UnlockExperimentalVMOptions
          - -XX:+UseCGroupMemoryLimitForHeap
          - -XX:MaxRAMFraction=1
          - -XshowSettings:vm
          - -jar
          - jmx_prometheus_httpserver.jar
          - {{ .Values.jmx.prometheus.port | quote }}
          - /etc/jmx-kafka-rest/jmx-kafka-rest-prometheus.yml
          ports:
          - containerPort: {{ .Values.jmx.prometheus.port }}
          resources:
{{ toYaml .Values.jmx.prometheus.resources | indent 12 }}
          volumeMounts:
          - name: jmx-config
            mountPath: /etc/jmx-kafka-rest
        {{- end }}
        - name: {{ template "cp-kafka-rest.fullname" . }}
          image: "{{ .Values.image }}:{{ .Values.imageTag }}"
          imagePullPolicy: "{{ .Values.imagePullPolicy }}"
          ports:
            - name: rest-proxy
              containerPort: {{ .Values.servicePort}}
              protocol: TCP
            {{- if .Values.jmx.enabled }}
            - containerPort: {{ .Values.jmx.port }}
              name: jmx
            {{- end }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          env:
          - name: KAFKA_REST_HOST_NAME
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: KAFKA_REST_BOOTSTRAP_SERVERS
            value: {{ template "cp-kafka-rest.kafka.bootstrapServers" . }}
          - name: KAFKA_REST_SCHEMA_REGISTRY_URL
            value: {{ template "cp-kafka-rest.cp-schema-registry.service-name" . }}
          - name: KAFKAREST_HEAP_OPTS
            value: "{{ .Values.heapOptions }}"
          {{- range $key, $value := .Values.configurationOverrides }}
          - name: {{ printf "KAFKA_REST_%s" $key | replace "." "_" | upper | quote }}
            value: {{ $value | quote }}
          {{- end }}
          {{- range $key, $value := .Values.customEnv }}
          - name: {{ $key | quote }}
            value: {{ $value | quote }}
          {{- end }}
          {{- if .Values.jmx.enabled }}
          - name: KAFKA_JMX_HOSTNAME
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: KAFKA_JMX_PORT
            value: "{{ .Values.jmx.port }}"
          - name: KAFKAREST_JMX_OPTS
            value: >-
              -Djava.rmi.server.hostname=$(CONNECT_REST_ADVERTISED_HOST_NAME)
              -Dcom.sun.management.jmxremote
              -Dcom.sun.management.jmxremote.authenticate=false
              -Dcom.sun.management.jmxremote.ssl=false
              -Dcom.sun.management.jmxremote.local.only=false
              -Dcom.sun.management.jmxremote.port={{ .Values.jmx.port }}
              -Dcom.sun.management.jmxremote.rmi.port={{ .Values.jmx.port }}
          {{- end }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.imagePullSecrets | indent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.jmx.prometheus.enabled }}
      - name: jmx-config
        configMap:
          name: {{ template "cp-kafka-rest.fullname" . }}-jmx-prometheus-configmap
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
